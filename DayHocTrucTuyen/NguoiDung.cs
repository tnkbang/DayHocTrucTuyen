//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DayHocTrucTuyen
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Text;

    public partial class NguoiDung
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public NguoiDung()
        {
            this.BaiDangs = new HashSet<BaiDang>();
            this.BaoCaos = new HashSet<BaoCao>();
            this.BiCamThis = new HashSet<BiCamThi>();
            this.BinhLuans = new HashSet<BinhLuan>();
            this.CamXucs = new HashSet<CamXuc>();
            this.CauTraLois = new HashSet<CauTraLoi>();
            this.DanhGiaLops = new HashSet<DanhGiaLop>();
            this.HocSinhThuocLops = new HashSet<HocSinhThuocLop>();
            this.LopHocs = new HashSet<LopHoc>();
            this.PhieuDanhGias = new HashSet<PhieuDanhGia>();
            this.ThichTrangs = new HashSet<ThichTrang>();
            this.ThichTrangs1 = new HashSet<ThichTrang>();
            this.ThoiGianLamBais = new HashSet<ThoiGianLamBai>();
            this.ThongBaos = new HashSet<ThongBao>();
            this.TinNhans = new HashSet<TinNhan>();
            this.TinNhans1 = new HashSet<TinNhan>();
            this.XemTrangs = new HashSet<XemTrang>();
            this.XemTrangs1 = new HashSet<XemTrang>();
        }
    
        public string Ma_ND { get; set; }
        public string Ma_Loai { get; set; }
        public string Ho_Lot { get; set; }
        public string Ten { get; set; }
        public Nullable<System.DateTime> Ngay_Sinh { get; set; }
        public Nullable<int> Gioi_Tinh { get; set; }
        public string SDT { get; set; }
        public string Email { get; set; }
        public string Mat_Khau { get; set; }
        public string Img_Avt { get; set; }
        public string Img_BG { get; set; }
        public string Img_Nhan_Dien { get; set; }
        public bool Trang_Thai { get; set; }
        public string Mo_Ta { get; set; }
        public System.DateTime Ngay_Tao { get; set; }
        public string Bi_Danh { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<BaiDang> BaiDangs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<BaoCao> BaoCaos { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<BiCamThi> BiCamThis { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<BinhLuan> BinhLuans { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CamXuc> CamXucs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CauTraLoi> CauTraLois { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DanhGiaLop> DanhGiaLops { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<HocSinhThuocLop> HocSinhThuocLops { get; set; }
        public virtual LoaiND LoaiND { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<LopHoc> LopHocs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PhieuDanhGia> PhieuDanhGias { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ThichTrang> ThichTrangs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ThichTrang> ThichTrangs1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ThoiGianLamBai> ThoiGianLamBais { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ThongBao> ThongBaos { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TinNhan> TinNhans { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TinNhan> TinNhans1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<XemTrang> XemTrangs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<XemTrang> XemTrangs1 { get; set; }

        DayHocTrucTuyenEntities db = new DayHocTrucTuyenEntities();
        public string setMaUser()
        {
            NguoiDung nd = db.NguoiDungs.OrderByDescending(x => x.Ma_ND).FirstOrDefault();
            if (nd == null)
            {
                return "U000001";
            }
            int temp = int.Parse(Convert.ToString(nd.Ma_ND).Substring(1));
            string ma_user = "U" + Convert.ToString(1000000 + temp + 1).Substring(1);
            return ma_user;
        }

        public DateTime setNgayTao()
        {
            return DateTime.Now;
        }

        public string mahoaMatKhau(string pass)
        {
            MD5 mh = MD5.Create();
            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(pass);
            byte[] hash = mh.ComputeHash(inputBytes);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hash.Length; i++)
            {
                sb.Append(hash[i].ToString("X2"));
            }
            return sb.ToString();
        }

        public string getImage()
        {
            var nd = db.NguoiDungs.FirstOrDefault(x => x.Ma_ND == this.Ma_ND);
            if (nd.Img_Avt == null) return "/Content/Img/userAvt/avt-default.png";
            if (nd.Img_Avt.ToLower().StartsWith("http")) return nd.Img_Avt;
            return "/Content/Img/userAvt/" + nd.Img_Avt;
        }

        public int getTuoi(DateTime birthDate)
        {
            DateTime n = DateTime.Now;
            int age = n.Year - birthDate.Year;
            if (n.Month < birthDate.Month || (n.Month == birthDate.Month && n.Day < birthDate.Day))
                age--;
            return age;
        }
        public int getYeuThich(string uid)
        {
            return db.ThichTrangs.Where(x => x.Nguoi_Dung == uid).Count();
        }
        public int getYeuThichTheoTuan(string uid)
        {
            return db.ThichTrangs.Where(x => x.Nguoi_Dung == uid && System.Data.Entity.DbFunctions.AddDays(x.Thoi_Gian, 7) >= DateTime.Now).Count();
        }
        public int getXemTrang(string uid)
        {
            return db.XemTrangs.Where(x => x.Nguoi_Dung == uid).Count();
        }
        public int getXemTrangTheoTuan(string uid)
        {
            return db.XemTrangs.Where(x => x.Nguoi_Dung == uid && System.Data.Entity.DbFunctions.AddDays(x.Thoi_Gian, 7) >= DateTime.Now).Count();
        }
        public bool liked(string user, string liker)
        {
            var liked = db.ThichTrangs.FirstOrDefault(x => x.Nguoi_Dung == user && x.Nguoi_Thich == liker);
            if (liked == null) return false;
            return true;
        }
        public int getJoinRoom(string user)
        {
            return db.HocSinhThuocLops.Where(x => x.Ma_ND == user).Count();
        }
        public int getOwnRoom(string user)
        {
            return db.LopHocs.Where(x => x.Ma_ND == user).Count();
        }
        public int getPost(string user)
        {
            return db.BaiDangs.Where(x => x.Ma_ND == user).Count();
        }
        public int getComment(string user)
        {
            return db.BinhLuans.Where(x => x.Ma_ND == user).Count();
        }
        public int getReact(string user)
        {
            return db.CamXucs.Where(x => x.Ma_ND == user).Count();
        }
        public List<LopHoc> getListJoin(string user)
        {
            var room = from c in db.LopHocs
                       join hs in db.HocSinhThuocLops on c.Ma_Lop equals hs.Ma_Lop
                       where hs.Ma_ND == user
                       orderby hs.Ngay_Tham_Gia descending
                       select c;
            foreach (var r in room)
            {
                r.Mat_Khau = null;
            }
            return room.ToList();
        }
    }
}
